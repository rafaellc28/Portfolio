angular.module('portfolioApp').directive "triangle", () ->
  ret =
    restrict: "A"
    link: (scope, element) ->
      upicon = 'up'
      downicon = 'down'
      noneicon = 'none'
      
      curPos = none
      elem = element[0]
      ctx = elem.getContext('2d')
      ctx.fillStyle="#2B65EC"
      
      element.bind 'click', (event) ->
        
        elem.width = elem.width
        neighbors = elem.getAttribute('data-neighbors')
        #alert(neighbors)
        
        if neighbors
          neighbors = neighbors.split(',')
        else
          neighbors = []
        
        #alert(neighbors)
        
        for id in neighbors
          neighbor = document.getElementById(id)
          #alert(neighbor.id)
          neighbor.width = neighbor.width
          ctx_aux = neighbor.getContext('2d')
          #ctx_aux.clearRect(0, 0, neighbor.widht, neighbor.height)
          ctx_aux.fillStyle="#2B65EC"
          none(ctx_aux)
        
        #alert()
        ctx.fillStyle="#2B65EC"
        
        if curPos == upicon or curPos == noneicon
          curPos = downicon
          down(ctx)
        else
          curPos = upicon
          up(ctx)
      
      #Draw up triangle
      up = (ctx_param) ->
        ctx_param.beginPath()
        ctx_param.moveTo(8,5)
        ctx_param.lineTo(14,16)
        ctx_param.lineTo(2,16)
        ctx_param.closePath()
        ctx_param.fill()
      
      #Draw down triangle
      down = (ctx_param) ->
        ctx_param.beginPath()
        ctx_param.moveTo(2,5)
        ctx_param.lineTo(14,5)
        ctx_param.lineTo(8,16)
        ctx_param.closePath()
        ctx_param.fill()
      
      #Draw none
      none = (ctx_param) ->
        ctx_param.fillRect(3,9,10,3)
      
      pos = scope.ordPos(elem.getAttribute('data-type'), elem.getAttribute('data-field'), elem.getAttribute('data-parent'))
      
      if pos == upicon
        curPos = upicon
        up(ctx)
      else if pos == downicon
        curPos = downicon
        down(ctx)
      else
        curPos = noneicon
        none(ctx)

angular.module('portfolioApp').directive "drawing", () ->
  ret =
    restrict: "A"
    link: (scope, element) ->
      ctx = element[0].getContext('2d')
      
      #variable that decides if something should be drawn on mousemove
      drawing = false
      
      #the last coordinates before the current move
      lastX = undefined
      lastY = undefined
      
      element.bind 'mousedown', (event) ->
        if event.offsetX != undefined 
          lastX = event.offsetX
          lastY = event.offsetY
        else #Firefox compatibility
          lastX = event.layerX - event.currentTarget.offsetLeft
          lastY = event.layerY - event.currentTarget.offsetTop
        
        #begins new line
        ctx.beginPath()
        
        drawing = true
      
      element.bind 'click', (event) ->
        alert('click')
      
      element.bind 'mousemove', (event) ->
        #alert('mousemove')
        if drawing 
          #get current mouse position
          if event.offsetX != undefined
            currentX = event.offsetX
            currentY = event.offsetY;
          else
            currentX = event.layerX - event.currentTarget.offsetLeft
            currentY = event.layerY - event.currentTarget.offsetTop
          
          draw(lastX, lastY, currentX, currentY)
          
          #set current coordinates to last one
          lastX = currentX
          lastY = currentY
      
      element.bind 'mouseup', (event) ->
        #stop drawing
        drawing = false
      
      #canvas reset
      reset = () ->
        element[0].width = element[0].width 
      
      draw = (lX, lY, cX, cY) ->
        #line from
        ctx.moveTo(lX,lY)
        #to
        ctx.lineTo(cX,cY)
        #color
        ctx.strokeStyle = "#4bf"
        #draw it
        ctx.stroke()

#$(document).ready ->

#  $(canvas[id^='canvas_'])
  
#  init = ->
#    canvas = $("#canvas_aux")
#    alert(canvas)
#    if canvas.getContext
#      ctx = canvas.getContext("2d")
#      alert(JSON.stringify(ctx))
#      #Draw triangle
#      #ctx.fillStyle="#A2322E"
      
#      #ctx.beginPath()
#      #Draw a triangle location for each corner from x:y 100,110 -> 200,10 -> 300,110 (it will return to first point)
#      #ctx.moveTo(100,110)
#      #ctx.lineTo(200,10)
#      #ctx.lineTo(300,110)
#      #ctx.closePath()
#      #ctx.fill()
#      ctx.fillRect(1,1,5,5)
#    else
#      alert("Not canvas context")
  
  #window.onload = init
